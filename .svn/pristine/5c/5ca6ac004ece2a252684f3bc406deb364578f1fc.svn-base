//
//  MenuMainScene.m
//  DeepSeaHunt
//
//  Created by 东海 阮 on 12-8-15.
//  Copyright 2012年 akn. All rights reserved.
//

#import "MenuMainScene.h"
#import "SimpleAudioEngine.h"
#import "SelectScene.h"
#import "HelpScene.h"
#import "SettingScene.h"
#import "GameDefine.h"
#import "Bubble.h"
#import "AppDelegate.h"



@implementation MenuMainScene


- (void)setGameState:(GameState)state {
    
    gameState = state;
    if (gameState == kGameStateWaitingForMatch) {
        [debugLabel setString:@"Waiting for match"];
    } else if (gameState == kGameStateWaitingForRandomNumber) {
        [debugLabel setString:@"Waiting for rand #"];
    } else if (gameState == kGameStateWaitingForStart) {
        [debugLabel setString:@"Waiting for start"];
    } else if (gameState == kGameStateActive) {
        [debugLabel setString:@"Active"];
    } else if (gameState == kGameStateDone) {
        [debugLabel setString:@"Done"];
    } 
    
}

- (void)sendData:(NSData *)data {
    NSError *error;
    BOOL success = [[GCHelper sharedInstance].match sendDataToAllPlayers:data withDataMode:GKMatchSendDataReliable error:&error];
    if (!success) {
        CCLOG(@"Error sending init packet");
        [self matchEnded];
    }
}

- (void)sendRandomNumber {
    
    MessageRandomNumber message;
    message.message.messageType = kMessageTypeRandomNumber;
    message.randomNumber = ourRandom;
    NSData *data = [NSData dataWithBytes:&message length:sizeof(MessageRandomNumber)];    
    [self sendData:data];
}

- (void)sendGameBegin {
    
    MessageGameBegin message;
    message.message.messageType = kMessageTypeGameBegin;
    NSData *data = [NSData dataWithBytes:&message length:sizeof(MessageGameBegin)];    
    [self sendData:data];
    
}

- (void)sendMove {
    
    MessageMove message;
    message.message.messageType = kMessageTypeMove;
    NSData *data = [NSData dataWithBytes:&message length:sizeof(MessageMove)];    
    [self sendData:data];
    
}

- (void)sendGameOver:(BOOL)player1Won {
    
    MessageGameOver message;
    message.message.messageType = kMessageTypeGameOver;
    message.player1Won = player1Won;
    NSData *data = [NSData dataWithBytes:&message length:sizeof(MessageGameOver)];    
    [self sendData:data];
    
} 

+ (id)scene
{
	CCScene *scene = [CCScene node];
    MenuMainScene *layer = [MenuMainScene node];
    [scene addChild:layer];
	return scene;
}

- (id)init
{
	if ((self = [super init])) {
		CGSize size = [[CCDirector sharedDirector] winSize];
		g_sceneSize = [[CCDirector sharedDirector] winSize];
		
        g_hasSound = YES;
		[SimpleAudioEngine sharedEngine].effectsVolume = 0.15f;
		
        
        //背景
		CCSprite *m_spMenuMainBg = [CCSprite spriteWithFile:@"menumain_bg.png"];
		m_spMenuMainBg.position = ccp(size.width / 2, size.height / 2);
		[self addChild: m_spMenuMainBg];
		
		
		//菜单        
		CCMenuItem *m_menuItemStart = [CCMenuItemImage itemWithNormalImage:@"menumain_btn_start.png" selectedImage:@"menumain_btn_start_.png" target: self selector:@selector(onGameStart)];
		m_menuItemStart.position = ccp(0, size.height/2);
		
        //		CCMenuItem *m_menuItemAbout = [CCMenuItemImage itemFromNormalImage:@"menumain_btn_about.png" selectedImage:@"menumain_btn_about_.png" target: self selector:@selector(onGameAbout)];
        //		m_menuItemAbout.position = ccp(0, size.height/2);
        //		
        //		CCMenuItem *m_menuItemExit = [CCMenuItemImage itemFromNormalImage:@"menumain_btn_exit.png" selectedImage:@"menumain_btn_exit_.png" target: self selector:@selector(onGameExit)];
        //		m_menuItemExit.position = ccp(0, size.height/2 - 50);
		
		CCMenuItem *m_menuItemSetting = [CCMenuItemImage itemWithNormalImage:@"menumain_btn_help.png" selectedImage:@"menumain_btn_help_.png" target: self selector:@selector(onGameHelp)];
		m_menuItemSetting.position = ccp(size.width/2 - [m_menuItemSetting contentSize].width * 2, size.height/2 - [m_menuItemSetting contentSize].height * 1.5);
		
		CCMenuItem *m_menuItemHelp = [CCMenuItemImage itemWithNormalImage:@"menumain_btn_setting.png" selectedImage:@"menumain_btn_setting_.png" target: self selector:@selector(onGameSetting)];
		m_menuItemHelp.position = ccp(size.width/2 - [m_menuItemSetting contentSize].width, size.height/2 - [m_menuItemSetting contentSize].height * 1.5);
		
		CCMenu *menu = [CCMenu menuWithItems:m_menuItemStart, /*m_menuItemAbout, m_menuItemExit,*/ m_menuItemHelp, m_menuItemSetting, nil];
		menu.position = ccp(size.width/2, - size.height / 4);
		[self addChild:menu z:99 tag:2];
		
		//气泡
		m_spbnBubbles = [CCSpriteBatchNode batchNodeWithFile:@"bubble.png"];
		for (int i = 0; i < 20; i ++) {
			Bubble *bubble = [Bubble bubbleWithFile:@"bubble.png"];
			bubble.visible = NO;
			[m_spbnBubbles addChild:bubble]; 
		}
        [self addChild:m_spbnBubbles];
		
		[self schedule:@selector(update) interval:0.05];
		
		if (g_hasSound) {
			[[SimpleAudioEngine sharedEngine] playBackgroundMusic:@"menu.mp3"];
			[CDAudioManager sharedManager].backgroundMusic.volume = 0.5f;	
            
		} 
        //播放声音
        //        cocos2d 加载声音
        //        使用cocos2d的SimpleAudioEngine可以很简单的播放背景音乐和音效。
        //        1，准备工作
        //        引入头文件：#import"SimpleAudioEngine.h"
        //        2，播放背景音乐
        //        [[SimpleAudioEnginesharedEngine] playBackgroundMusic:@"background.wav"];
        //        注：如果之前有播放过名字为background.wav的背景音乐，则这个方法为从头开始播放背景音乐。
        //        3，播放音效
        //        [[SimpleAudioEnginesharedEngine] playEffect:@"effect1.wav"];
        //        4，暂停背景音乐
        //        [[SimpleAudioEnginesharedEngine] pauseBackgroundMusic];
        //        5，预先加载背景音乐
        //        [[SimpleAudioEnginesharedEngine] preloadBackgroundMusic];
        //        
        //        使用CDAudioManager来更改音乐的属性（更改属性之前必须有背景音乐在播放或者背景音乐被preload进来 了）
        //        6，更改音量（音量大小从0到1）
        //        [CDAudioManagersharedManager].backgroundMusic.volume = 1.0f;
        //        7，循环播放N次背景音乐
        //        [CDAudioManagersharedManager].backgroundMusic.numberOfLoops ＝ N;
        //        8，背景音乐停止时触发事件
        //        [[CDAudioManagersharedManager]setBackgroundMusicCompletionListener:selfselector:@selector()];
        
        // gamecenter
        debugLabel = [CCLabelBMFont labelWithString:@"" fntFile:@"Arial.fnt"];
        debugLabel.position = ccp(g_sceneSize.width/2, 300);
        [self addChild:debugLabel];
		
        // Set ourselves as player 1 and the game to active
        isPlayer1 = YES;
        //[self setGameState:kGameStateActive];
        
        [[GCHelper sharedInstance] findMatchWithMinPlayers:2 maxPlayers:2 viewController:[CCDirector sharedDirector] delegate:self];
        
        ourRandom = arc4random();
        [self setGameState:kGameStateWaitingForMatch];
	}
	return self;
}

- (void)update
{
    
	CCArray* bubbles = [m_spbnBubbles children];	
	int count = 0;
	for (int i = 0; i < 20; i ++) {
		CCNode* node = [bubbles objectAtIndex:i];
		NSAssert([node isKindOfClass:[Bubble class]], @"not a bubble!");
		Bubble *bubble = (Bubble *)node;
		if (bubble.visible == YES) {
			count ++;
		}
	}
	
	if (count < 15) {
		for (int i = 0; i < 20; i ++) {
			CCNode* node = [bubbles objectAtIndex:i];
			NSAssert([node isKindOfClass:[Bubble class]], @"not a bubble!");
			Bubble *bubble = (Bubble *)node;
			if (bubble.visible == NO) {
				bubble.visible = YES;
				[bubble setActions];
				return;
			}
		}
	}
	
}

-(void) onGameStart
{
    //	[MainScene showScene:STATE_SELECT];
    CCScene *scene = [SelectScene scene];
    [[CCDirector sharedDirector] pushScene:[CCTransitionFadeBL transitionWithDuration:1 scene:scene]];
    
}

-(void) onGameAbout
{
    //	[MainScene showScene:STATE_ABOUT];
    
}

-(void) onGameSetting
{
    //	[MainScene showScene:STATE_SETTING];
    CCScene *scene = [SettingScene scene];
    [[CCDirector sharedDirector] pushScene:[CCTransitionFadeBL transitionWithDuration:1 scene:scene]];
}

-(void) onGameExit
{
    //	[MainScene showScene:STATE_ASK_EXIT];
    
}

-(void) onGameHelp
{
	//[MainScene showScene:STATE_HELP];
    CCScene *scene = [HelpScene scene];
    [[CCDirector sharedDirector] pushScene:[CCTransitionFadeBL transitionWithDuration:1 scene:scene]];
}

#pragma mark GCHelperDelegate

- (void)matchStarted {    
    CCLOG(@"Match started");        
    if (receivedRandom) {
        [self setGameState:kGameStateWaitingForStart];
    } else {
        [self setGameState:kGameStateWaitingForRandomNumber];
    }
    [self sendRandomNumber];
//    [self tryStartGame];
}

- (void)inviteReceived {
//    [self restartTapped:nil];    
}

- (void)matchEnded {    
    CCLOG(@"Match ended");    
    [[GCHelper sharedInstance].match disconnect];
    [GCHelper sharedInstance].match = nil;
//    [self endScene:kEndReasonDisconnect];
}

- (void)match:(GKMatch *)match didReceiveData:(NSData *)data fromPlayer:(NSString *)playerID {
    
    // Store away other player ID for later
    if (otherPlayerID == nil) {
        otherPlayerID = [playerID retain];
    }
    
    Message *message = (Message *) [data bytes];
    if (message->messageType == kMessageTypeRandomNumber) {
        
        MessageRandomNumber * messageInit = (MessageRandomNumber *) [data bytes];
        CCLOG(@"Received random number: %ud, ours %ud", messageInit->randomNumber, ourRandom);
        bool tie = false;
        
        if (messageInit->randomNumber == ourRandom) {
            CCLOG(@"TIE!");
            tie = true;
            ourRandom = arc4random();
            [self sendRandomNumber];
        } else if (ourRandom > messageInit->randomNumber) {            
            CCLOG(@"We are player 1");
            isPlayer1 = YES;            
        } else {
            CCLOG(@"We are player 2");
            isPlayer1 = NO;
        }
        
        if (!tie) {
            receivedRandom = YES;    
            if (gameState == kGameStateWaitingForRandomNumber) {
                [self setGameState:kGameStateWaitingForStart];
            }
//            [self tryStartGame];        
        }
        
    } else if (message->messageType == kMessageTypeGameBegin) {        
        
        [self setGameState:kGameStateActive];
//        [self setupStringsWithOtherPlayerId:playerID];
        
    } else if (message->messageType == kMessageTypeMove) {     
        
        CCLOG(@"Received move");
        
//        if (isPlayer1) {
//            [player2 moveForward];
//        } else {
//            [player1 moveForward];
//        }        
    } else if (message->messageType == kMessageTypeGameOver) {        
        
        MessageGameOver * messageGameOver = (MessageGameOver *) [data bytes];
        CCLOG(@"Received game over with player 1 won: %d", messageGameOver->player1Won);
        
        if (messageGameOver->player1Won) {
//            [self endScene:kEndReasonLose];    
        } else {
//            [self endScene:kEndReasonWin];    
        }
        
    }    
}


@end
